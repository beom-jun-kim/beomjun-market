// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  url          = env("DATABASE_URL")
  provider     = "mysql"
  relationMode = "prisma"
}

model User {

  // @ : 식별자
  // @default(autoincrement()) : 기본설정 (자동으로 증가하게)
  id Int @id @default(autoincrement())

  // BigInt : 좀 더 긴 정수( ex) input에 입력되는 전화번호 ) 사용 가능, string으로도 가능
  phone  String? @unique
  email  String? @unique
  name   String
  avatar String?

  // now() : 날짜를 가져옴
  created DateTime @default(now())

  // updatedAt : 유저가 업데이트 될 때마다 field 변화 인지
  updated DateTime @updatedAt()
  tokens   Token[]
  product Product[]
  favs Fav[]
  Post Post[]
  answers Answer[]
  wondering Wondering[]
  createdBy Review[] @relation(name: "writtenReviews")
  createdFor Review[] @relation(name: "receivedReviews")
  Sale Sale []
  Purchase Purchase []
  record Record[]
}

// 추가후 npx prisma db push : db를 수정하는 동시에 prisma client를 만들어줌
model Token {
  id Int @id @default(autoincrement())

  // 중요! schema에서 정한 name이랑 넘겨주는 데이터 name이랑 같아야함 (payload)
  payload String @unique

  // 자동완성되지 않을 때 콘솔창에 "npx prisma foirmat"
  // 네임스페이스 형태로 데이터 접근가능
  // onDelete : 삭제 되었을때 동작
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // db에 실제 user전체 데이터가 들어가지 않아서
  userId  Int
  created DateTime @default(now())
  updated DateTime @updatedAt()    
  @@index([userId])
}
// 서버연결 안될시 : 서버 종료후 , connet명령어 후 push 명령어 후 서버

model Product {
 id Int @id @default(autoincrement()) 
 created DateTime @default(now())
 updated DateTime @updatedAt()
 user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 userId Int
 image String
 name String
 price Int
 description String @db.MediumText
 favs Fav[]
 sale Sale []
 Purchase Purchase []
 record Record []
 @@index([userId])
}

model Post {
  id Int @id @default(autoincrement())  
  created DateTime @default(now())
  updated DateTime @updatedAt()
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int
  question String @db.MediumText
  answers Answer[]
  wondering Wondering[]
  latitude Float?
  longitude Float?
  @@index([userId])
}

model Answer {
  id Int @id @default(autoincrement())
  created DateTime @default(now())
  updated DateTime @updatedAt()
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId Int
  answer String @db.MediumText
  @@index([userId])
  @@index([postId])
}

model Wondering {
  id Int @id @default(autoincrement())
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId Int
  created DateTime @default(now())
  updated DateTime @updatedAt()
  @@index([userId])
  @@index([postId])
}

model Review {
  id Int @id @default(autoincrement())
  created DateTime @default(now())
  updated DateTime @updatedAt()
  review String @db.MediumText

  // name: 관계를 명확하게 하기 위해 관계의 이름을 정의
  createdBy User @relation(name: "writtenReviews", fields: [createdById], references: [id], onDelete: Cascade)
  createdById  Int
  createdFor User @relation(name:"receivedReviews",fields: [createdForId], references: [id], onDelete: Cascade)
  createdForId Int
  score Int
  @@index([createdById])
  @@index([createdForId])
}

model Sale {
  id Int @id @default(autoincrement()) 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  created DateTime @default(now())
  updated DateTime @updatedAt()
  @@index([userId])
  @@index([productId])
}

model Purchase {
  id Int @id @default(autoincrement()) 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  created DateTime @default(now())
  updated DateTime @updatedAt()
  @@index([userId])
  @@index([productId])
}

model Fav {
  id Int @id @default(autoincrement()) 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  created DateTime @default(now())
  updated DateTime @updatedAt()
  kind kind
  @@index([userId])
  @@index([productId])
}

model Record {
  id Int @id @default(autoincrement()) 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  created DateTime @default(now())
  updated DateTime @updatedAt()
  kind kind
  @@index([userId])
  @@index([productId])
}

enum kind {
  Purchase
  Sale
  Fav
}

// 데이터베이스가 이미 존재하는 모델의 schema를 변경하고자 할때

// 1. 기존 데이터 베이스를 지운 후 생성
// 2. 새로 추가되는 필드를 옵셔널하게 생성
// 3. default value를 입력하여 기존 데이터에도 추가되도록 설정